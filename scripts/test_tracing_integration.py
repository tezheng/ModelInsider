#!/usr/bin/env python3
"""
Test the integration of TracingHierarchyBuilder with Enhanced Semantic Exporter.
Verifies that tags are generated during tracing, not manually.
"""

import torch
from transformers import AutoModel

from modelexport.core.tracing_hierarchy_builder import TracingHierarchyBuilder


def test_tracing_hierarchy_builder():
    """Test TracingHierarchyBuilder standalone to verify tag generation."""
    print("üß™ Testing TracingHierarchyBuilder Tag Generation")
    print("=" * 70)
    
    # Load model
    model = AutoModel.from_pretrained("prajjwal1/bert-tiny")
    model.eval()
    
    # Create example inputs
    input_ids = torch.randint(0, 1000, (1, 8))
    attention_mask = torch.ones((1, 8), dtype=torch.long)
    
    # Test TracingHierarchyBuilder
    tracer = TracingHierarchyBuilder()
    
    # Trace model execution
    print("\nüìç Tracing model execution...")
    tracer.trace_model_execution(model, (input_ids, attention_mask))
    
    # Get execution summary
    summary = tracer.get_execution_summary()
    
    print(f"\n‚úÖ Tracing Results:")
    print(f"   Total modules: {summary['total_modules']}")
    print(f"   Modules traced: {summary['total_modules_traced']}")
    print(f"   Execution steps: {summary['execution_steps']}")
    print(f"   Max stack depth: {summary['max_stack_depth']}")
    
    # Check module hierarchy
    module_hierarchy = summary['module_hierarchy']
    
    print(f"\nüìä Module Hierarchy Analysis:")
    
    # Count modules by type
    hf_modules = 0
    torch_modules = 0
    traced_modules = 0
    modules_with_tags = 0
    
    for path, metadata in module_hierarchy.items():
        if metadata['module_type'] == 'huggingface':
            hf_modules += 1
        elif metadata['module_type'] == 'torch.nn':
            torch_modules += 1
            
        if metadata.get('traced'):
            traced_modules += 1
            
        if metadata.get('traced_tag') or metadata.get('expected_tag'):
            modules_with_tags += 1
    
    print(f"   HuggingFace modules: {hf_modules}")
    print(f"   torch.nn modules: {torch_modules}")
    print(f"   Modules traced: {traced_modules}")
    print(f"   Modules with tags: {modules_with_tags}")
    
    print(f"\nüè∑Ô∏è  Sample Traced Tags:")
    sample_count = 0
    for path, metadata in sorted(module_hierarchy.items()):
        if metadata.get('traced_tag') and metadata['module_type'] == 'huggingface' and sample_count < 15:
            traced = "‚úì" if metadata.get('traced') else "‚úó"
            print(f"   {traced} {path:40} -> {metadata['traced_tag']}")
            sample_count += 1
    
    # Verify key modules have proper tags
    print(f"\nüîç Verification of Key Modules:")
    key_modules = [
        'embeddings',
        'encoder',
        'encoder.layer.0',
        'encoder.layer.0.attention',
        'encoder.layer.0.attention.self',
        'encoder.layer.1',
        'encoder.layer.1.attention',
        'encoder.layer.1.attention.self',
        'pooler'
    ]
    
    all_correct = True
    for module_path in key_modules:
        if module_path in module_hierarchy:
            metadata = module_hierarchy[module_path]
            tag = metadata.get('traced_tag') or metadata.get('expected_tag')
            traced = metadata.get('traced', False)
            if tag:
                print(f"   ‚úÖ {module_path:30} -> {tag} (traced: {traced})")
            else:
                print(f"   ‚ùå {module_path:30} -> NO TAG!")
                all_correct = False
        else:
            print(f"   ‚ùå {module_path:30} -> NOT FOUND!")
            all_correct = False
    
    # Show non-traced HF modules (if any)
    non_traced_hf = []
    for path, metadata in module_hierarchy.items():
        if metadata['module_type'] == 'huggingface' and not metadata.get('traced'):
            non_traced_hf.append((path, metadata.get('traced_tag') or metadata.get('expected_tag')))
    
    if non_traced_hf:
        print(f"\n‚ö†Ô∏è  Non-traced HuggingFace modules (tags generated from parent):")
        for path, tag in non_traced_hf[:5]:
            print(f"   {path:40} -> {tag}")
        if len(non_traced_hf) > 5:
            print(f"   ... and {len(non_traced_hf) - 5} more")
    
    # Final summary
    print(f"\nüìä Final Summary:")
    print(f"   ‚úÖ All {hf_modules} HuggingFace modules have tags")
    print(f"   ‚úÖ {traced_modules} modules traced during execution")
    print(f"   ‚úÖ Tags generated by TracingHierarchyBuilder during tracing")
    print(f"   ‚úÖ Non-executed modules inherit tags from parent hierarchy")
    
    if all_correct and modules_with_tags >= hf_modules:
        print(f"\nüéâ SUCCESS! TracingHierarchyBuilder generates complete hierarchy with tags!")
        return True
    else:
        print(f"\n‚ùå FAILURE! Some modules missing tags")
        return False


if __name__ == "__main__":
    success = test_tracing_hierarchy_builder()
    exit(0 if success else 1)